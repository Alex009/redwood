buildscript {
  ext.versions = [
    'kotlin': [
      'coroutines': '1.3.9',
    ],
  ]

  ext.deps = [
    'composeCompiler': 'androidx.compose.compiler:compiler:1.0.0-alpha05',
    'kotlin': [
      'coroutines': [
        'android': "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.kotlin.coroutines}",
        'core': "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.kotlin.coroutines}",
      ],
    ],
  ]

  dependencies {
    classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.4.10'
    classpath 'com.android.tools.build:gradle:4.0.2'
  }
  repositories {
    mavenCentral()
    google()
    jcenter {
      // Required for a dependency of Android lint.
      content {
        includeGroup 'org.jetbrains.trove4j'
      }
    }
  }
}

subprojects {
  repositories {
    mavenCentral()
    google()
    maven {
      url 'https://kotlin.bintray.com/kotlinx'
    }
    jcenter {
      // Required for a dependency of Android lint.
      content {
        includeGroup 'org.jetbrains.trove4j'
      }
    }
  }

  tasks.withType(org.jetbrains.kotlin.gradle.dsl.KotlinCompile).configureEach { task ->
    task.kotlinOptions {
      freeCompilerArgs += [
        '-progressive',
        '-Xopt-in=kotlin.RequiresOptIn',
        '-Xopt-in=androidx.compose.runtime.ExperimentalComposeApi',
      ]
    }
  }

  tasks.withType(org.jetbrains.kotlin.gradle.dsl.KotlinJvmCompile).configureEach { task ->
    task.kotlinOptions {
      useIR = true
    }
  }

  plugins.withType(com.android.build.gradle.BasePlugin).configureEach { plugin ->
    def android = plugin.extension
    android.compileSdkVersion 30
    android.defaultConfig {
      minSdkVersion 21
      targetSdkVersion 30
    }
    android.buildFeatures {
      aidl = false
      renderScript = false
      resValues = false
      shaders = false
    }
  }

  def configureKotlinPlugin = {
    configurations {
      kotlinPlugin
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
      def pluginConfiguration = configurations.kotlinPlugin
      dependsOn(pluginConfiguration)
      doFirst {
        if (!pluginConfiguration.isEmpty()) {
          kotlinOptions{
            useIR = true
            freeCompilerArgs +=
              "-Xplugin=${pluginConfiguration.files.first()}"
          }
        }
      }
    }
  }
  plugins.withId('org.jetbrains.kotlin.android', configureKotlinPlugin)
  plugins.withId('org.jetbrains.kotlin.jvm', configureKotlinPlugin)
  plugins.withId('org.jetbrains.kotlin.multiplatform', configureKotlinPlugin)
}
