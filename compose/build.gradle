if (!file('upstream/.git').exists()) {
  throw new RuntimeException(
    "Missing 'upstream' git submodule clone. Did you run 'git submodule update --init'?")
}

def upstreamLibraryVersions = file('upstream/libraryversions.toml').text.readLines()
def upstreamDependencyVersions = file('upstream/gradle/libs.versions.toml').text.readLines()

def upstreamComposeVersion = upstreamLibraryVersions.find { it.startsWith("COMPOSE = ") }
if (!upstreamComposeVersion.contains("\"${libs.versions.androidCompose.get()}\"")) {
  throw new RuntimeException(
    "Upstream git repository Compose version does not match project version ${libs.versions.androidCompose.get()}: $upstreamComposeVersion")
}

def upstreamKotlinVersion = upstreamDependencyVersions.find { it.startsWith("kotlin = ") }
if (!upstreamKotlinVersion.contains("\"${libs.versions.kotlin.get()}\"")) {
  throw new RuntimeException(
    "Upstream git repository Kotlin version does not match project version ${libs.versions.kotlin.get()}: $upstreamKotlinVersion")
}

def upstreamCoroutinesVersion = upstreamDependencyVersions.find { it.startsWith("kotlinCoroutines = ") }
if (!upstreamCoroutinesVersion.contains("\"${libs.versions.kotlinx.coroutines.get()}\"")) {
  throw new RuntimeException(
    "Upstream git repository Kotlin coroutines version does not match project version $libs.versions.kotlinx.coroutines.get()}: $upstreamCoroutinesVersion")
}

def upstreamAtomicFuVersion = upstreamDependencyVersions.find { it.startsWith("atomicFu = ") }
if (!upstreamAtomicFuVersion.contains("\"${libs.versions.kotlinx.atomicFu.get()}\"")) {
  throw new RuntimeException(
    "Upstream git repository AtomicFu version does not match project version $libs.versions.kotlinx.atomicFu.get()}: $upstreamAtomicFuVersion")
}
